// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dataproto.proto
#ifndef GRPC_dataproto_2eproto__INCLUDED
#define GRPC_dataproto_2eproto__INCLUDED

#include "dataproto.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace dataproto {

// Defines the service
class DistMutex final {
 public:
  static constexpr char const* service_full_name() {
    return "dataproto.DistMutex";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status recv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::dataproto::MessageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>> Asyncrecv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>>(AsyncrecvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>> PrepareAsyncrecv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>>(PrepareAsyncrecvRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Function invoked to send the request
      virtual void recv(::grpc::ClientContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::MessageReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>* AsyncrecvRaw(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::MessageReply>* PrepareAsyncrecvRaw(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status recv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::dataproto::MessageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>> Asyncrecv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>>(AsyncrecvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>> PrepareAsyncrecv(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>>(PrepareAsyncrecvRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void recv(::grpc::ClientContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response, std::function<void(::grpc::Status)>) override;
      void recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::MessageReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>* AsyncrecvRaw(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::MessageReply>* PrepareAsyncrecvRaw(::grpc::ClientContext* context, const ::dataproto::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_recv_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv(::grpc::ServerContext* context, ::dataproto::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::MessageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_recv<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::MessageRequest, ::dataproto::MessageReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::MessageRequest* request,
                 ::dataproto::MessageReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_recv<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::MessageRequest, ::dataproto::MessageReply>(std::bind(&WithStreamedUnaryMethod_recv<BaseClass>::Streamedrecv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv(::grpc::ServerContext* context, const ::dataproto::MessageRequest* request, ::dataproto::MessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::MessageRequest,::dataproto::MessageReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_recv<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_recv<Service > StreamedService;
};

class DSM final {
 public:
  static constexpr char const* service_full_name() {
    return "dataproto.DSM";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status dsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> Asyncdsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(Asyncdsm_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> PrepareAsyncdsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(PrepareAsyncdsm_recvRaw(context, request, cq));
    }
    virtual ::grpc::Status dsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> Asyncdsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(Asyncdsm_ninvalid_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> PrepareAsyncdsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(PrepareAsyncdsm_ninvalid_recvRaw(context, request, cq));
    }
    virtual ::grpc::Status dsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> Asyncdsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(Asyncdsm_data_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> PrepareAsyncdsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(PrepareAsyncdsm_data_recvRaw(context, request, cq));
    }
    virtual ::grpc::Status dt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::dataproto::DTReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>> Asyncdt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>>(Asyncdt_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>> PrepareAsyncdt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>>(PrepareAsyncdt_recvRaw(context, request, cq));
    }
    virtual ::grpc::Status dsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> Asyncdsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(Asyncdsm_ack_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>> PrepareAsyncdsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>>(PrepareAsyncdsm_ack_recvRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void dsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_ninvalid_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_data_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dt_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DTReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void dsm_ack_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* Asyncdsm_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* PrepareAsyncdsm_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* Asyncdsm_ninvalid_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* PrepareAsyncdsm_ninvalid_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* Asyncdsm_data_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* PrepareAsyncdsm_data_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>* Asyncdt_recvRaw(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DTReply>* PrepareAsyncdt_recvRaw(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* Asyncdsm_ack_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dataproto::DSMReply>* PrepareAsyncdsm_ack_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status dsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> Asyncdsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(Asyncdsm_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> PrepareAsyncdsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(PrepareAsyncdsm_recvRaw(context, request, cq));
    }
    ::grpc::Status dsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> Asyncdsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(Asyncdsm_ninvalid_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> PrepareAsyncdsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(PrepareAsyncdsm_ninvalid_recvRaw(context, request, cq));
    }
    ::grpc::Status dsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> Asyncdsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(Asyncdsm_data_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> PrepareAsyncdsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(PrepareAsyncdsm_data_recvRaw(context, request, cq));
    }
    ::grpc::Status dt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::dataproto::DTReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>> Asyncdt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>>(Asyncdt_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>> PrepareAsyncdt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>>(PrepareAsyncdt_recvRaw(context, request, cq));
    }
    ::grpc::Status dsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::dataproto::DSMReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> Asyncdsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(Asyncdsm_ack_recvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>> PrepareAsyncdsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>>(PrepareAsyncdsm_ack_recvRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void dsm_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_ninvalid_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_ninvalid_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_data_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_data_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dt_recv(::grpc::ClientContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response, std::function<void(::grpc::Status)>) override;
      void dt_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DTReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_ack_recv(::grpc::ClientContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
      void dsm_ack_recv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dataproto::DSMReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* Asyncdsm_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* PrepareAsyncdsm_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* Asyncdsm_ninvalid_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* PrepareAsyncdsm_ninvalid_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* Asyncdsm_data_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* PrepareAsyncdsm_data_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>* Asyncdt_recvRaw(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DTReply>* PrepareAsyncdt_recvRaw(::grpc::ClientContext* context, const ::dataproto::DTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* Asyncdsm_ack_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dataproto::DSMReply>* PrepareAsyncdsm_ack_recvRaw(::grpc::ClientContext* context, const ::dataproto::DSMRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_dsm_recv_;
    const ::grpc::internal::RpcMethod rpcmethod_dsm_ninvalid_recv_;
    const ::grpc::internal::RpcMethod rpcmethod_dsm_data_recv_;
    const ::grpc::internal::RpcMethod rpcmethod_dt_recv_;
    const ::grpc::internal::RpcMethod rpcmethod_dsm_ack_recv_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response);
    virtual ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response);
    virtual ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response);
    virtual ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response);
    virtual ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dsm_recv() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_recv(::grpc::ServerContext* context, ::dataproto::DSMRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::DSMReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dsm_ninvalid_recv() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_ninvalid_recv(::grpc::ServerContext* context, ::dataproto::DSMRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::DSMReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dsm_data_recv() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_data_recv(::grpc::ServerContext* context, ::dataproto::DSMRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::DSMReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dt_recv() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdt_recv(::grpc::ServerContext* context, ::dataproto::DTRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::DTReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_dsm_ack_recv() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_ack_recv(::grpc::ServerContext* context, ::dataproto::DSMRequest* request, ::grpc::ServerAsyncResponseWriter< ::dataproto::DSMReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_dsm_recv<WithAsyncMethod_dsm_ninvalid_recv<WithAsyncMethod_dsm_data_recv<WithAsyncMethod_dt_recv<WithAsyncMethod_dsm_ack_recv<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_dsm_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::DSMRequest* request,
                 ::dataproto::DSMReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->dsm_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_dsm_ninvalid_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::DSMRequest* request,
                 ::dataproto::DSMReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->dsm_ninvalid_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_dsm_data_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::DSMRequest* request,
                 ::dataproto::DSMReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->dsm_data_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_dt_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::DTRequest, ::dataproto::DTReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::DTRequest* request,
                 ::dataproto::DTReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->dt_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_dsm_ack_recv() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(
          [this](::grpc::ServerContext* context,
                 const ::dataproto::DSMRequest* request,
                 ::dataproto::DSMReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->dsm_ack_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_dsm_recv<ExperimentalWithCallbackMethod_dsm_ninvalid_recv<ExperimentalWithCallbackMethod_dsm_data_recv<ExperimentalWithCallbackMethod_dt_recv<ExperimentalWithCallbackMethod_dsm_ack_recv<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dsm_recv() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dsm_ninvalid_recv() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dsm_data_recv() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dt_recv() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_dsm_ack_recv() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dsm_recv() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_recv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dsm_ninvalid_recv() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_ninvalid_recv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dsm_data_recv() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_data_recv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dt_recv() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdt_recv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_dsm_ack_recv() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdsm_ack_recv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_dsm_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->dsm_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_dsm_ninvalid_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->dsm_ninvalid_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_ninvalid_recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_dsm_data_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->dsm_data_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_data_recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_dt_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->dt_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dt_recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_dsm_ack_recv() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->dsm_ack_recv(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void dsm_ack_recv(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dsm_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dsm_recv() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(std::bind(&WithStreamedUnaryMethod_dsm_recv<BaseClass>::Streameddsm_recv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dsm_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dsm_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddsm_recv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::DSMRequest,::dataproto::DSMReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dsm_ninvalid_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dsm_ninvalid_recv() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(std::bind(&WithStreamedUnaryMethod_dsm_ninvalid_recv<BaseClass>::Streameddsm_ninvalid_recv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dsm_ninvalid_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dsm_ninvalid_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddsm_ninvalid_recv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::DSMRequest,::dataproto::DSMReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dsm_data_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dsm_data_recv() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(std::bind(&WithStreamedUnaryMethod_dsm_data_recv<BaseClass>::Streameddsm_data_recv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dsm_data_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dsm_data_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddsm_data_recv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::DSMRequest,::dataproto::DSMReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dt_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dt_recv() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::DTRequest, ::dataproto::DTReply>(std::bind(&WithStreamedUnaryMethod_dt_recv<BaseClass>::Streameddt_recv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dt_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dt_recv(::grpc::ServerContext* context, const ::dataproto::DTRequest* request, ::dataproto::DTReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddt_recv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::DTRequest,::dataproto::DTReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_dsm_ack_recv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_dsm_ack_recv() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::dataproto::DSMRequest, ::dataproto::DSMReply>(std::bind(&WithStreamedUnaryMethod_dsm_ack_recv<BaseClass>::Streameddsm_ack_recv, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_dsm_ack_recv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status dsm_ack_recv(::grpc::ServerContext* context, const ::dataproto::DSMRequest* request, ::dataproto::DSMReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddsm_ack_recv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dataproto::DSMRequest,::dataproto::DSMReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_dsm_recv<WithStreamedUnaryMethod_dsm_ninvalid_recv<WithStreamedUnaryMethod_dsm_data_recv<WithStreamedUnaryMethod_dt_recv<WithStreamedUnaryMethod_dsm_ack_recv<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_dsm_recv<WithStreamedUnaryMethod_dsm_ninvalid_recv<WithStreamedUnaryMethod_dsm_data_recv<WithStreamedUnaryMethod_dt_recv<WithStreamedUnaryMethod_dsm_ack_recv<Service > > > > > StreamedService;
};

}  // namespace dataproto


#endif  // GRPC_dataproto_2eproto__INCLUDED
