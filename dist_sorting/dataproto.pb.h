// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataproto.proto

#ifndef PROTOBUF_INCLUDED_dataproto_2eproto
#define PROTOBUF_INCLUDED_dataproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataproto_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dataproto_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dataproto_2eproto();
namespace dataproto {
class DSMReply;
class DSMReplyDefaultTypeInternal;
extern DSMReplyDefaultTypeInternal _DSMReply_default_instance_;
class DSMRequest;
class DSMRequestDefaultTypeInternal;
extern DSMRequestDefaultTypeInternal _DSMRequest_default_instance_;
class DTReply;
class DTReplyDefaultTypeInternal;
extern DTReplyDefaultTypeInternal _DTReply_default_instance_;
class DTRequest;
class DTRequestDefaultTypeInternal;
extern DTRequestDefaultTypeInternal _DTRequest_default_instance_;
class MessageReply;
class MessageReplyDefaultTypeInternal;
extern MessageReplyDefaultTypeInternal _MessageReply_default_instance_;
class MessageRequest;
class MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
}  // namespace dataproto
namespace google {
namespace protobuf {
template<> ::dataproto::DSMReply* Arena::CreateMaybeMessage<::dataproto::DSMReply>(Arena*);
template<> ::dataproto::DSMRequest* Arena::CreateMaybeMessage<::dataproto::DSMRequest>(Arena*);
template<> ::dataproto::DTReply* Arena::CreateMaybeMessage<::dataproto::DTReply>(Arena*);
template<> ::dataproto::DTRequest* Arena::CreateMaybeMessage<::dataproto::DTRequest>(Arena*);
template<> ::dataproto::MessageReply* Arena::CreateMaybeMessage<::dataproto::MessageReply>(Arena*);
template<> ::dataproto::MessageRequest* Arena::CreateMaybeMessage<::dataproto::MessageRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dataproto {

// ===================================================================

class MessageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.MessageRequest) */ {
 public:
  MessageRequest();
  virtual ~MessageRequest();

  MessageRequest(const MessageRequest& from);

  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageRequest(MessageRequest&& from) noexcept
    : MessageRequest() {
    *this = ::std::move(from);
  }

  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
               &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageRequest* other);
  friend void swap(MessageRequest& a, MessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageRequest* New() const final {
    return CreateMaybeMessage<MessageRequest>(nullptr);
  }

  MessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageRequest& from);
  void MergeFrom(const MessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nodeId = 3;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 3;
  const ::std::string& nodeid() const;
  void set_nodeid(const ::std::string& value);
  #if LANG_CXX11
  void set_nodeid(::std::string&& value);
  #endif
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  ::std::string* mutable_nodeid();
  ::std::string* release_nodeid();
  void set_allocated_nodeid(::std::string* nodeid);

  // int32 seqId = 1;
  void clear_seqid();
  static const int kSeqIdFieldNumber = 1;
  ::google::protobuf::int32 seqid() const;
  void set_seqid(::google::protobuf::int32 value);

  // int32 msgType = 2;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  ::google::protobuf::int32 msgtype() const;
  void set_msgtype(::google::protobuf::int32 value);

  // int32 lockNo = 4;
  void clear_lockno();
  static const int kLockNoFieldNumber = 4;
  ::google::protobuf::int32 lockno() const;
  void set_lockno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataproto.MessageRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nodeid_;
  ::google::protobuf::int32 seqid_;
  ::google::protobuf::int32 msgtype_;
  ::google::protobuf::int32 lockno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// -------------------------------------------------------------------

class MessageReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.MessageReply) */ {
 public:
  MessageReply();
  virtual ~MessageReply();

  MessageReply(const MessageReply& from);

  inline MessageReply& operator=(const MessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageReply(MessageReply&& from) noexcept
    : MessageReply() {
    *this = ::std::move(from);
  }

  inline MessageReply& operator=(MessageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MessageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageReply* internal_default_instance() {
    return reinterpret_cast<const MessageReply*>(
               &_MessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MessageReply* other);
  friend void swap(MessageReply& a, MessageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageReply* New() const final {
    return CreateMaybeMessage<MessageReply>(nullptr);
  }

  MessageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageReply& from);
  void MergeFrom(const MessageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataproto.MessageReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// -------------------------------------------------------------------

class DSMRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.DSMRequest) */ {
 public:
  DSMRequest();
  virtual ~DSMRequest();

  DSMRequest(const DSMRequest& from);

  inline DSMRequest& operator=(const DSMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSMRequest(DSMRequest&& from) noexcept
    : DSMRequest() {
    *this = ::std::move(from);
  }

  inline DSMRequest& operator=(DSMRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DSMRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSMRequest* internal_default_instance() {
    return reinterpret_cast<const DSMRequest*>(
               &_DSMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DSMRequest* other);
  friend void swap(DSMRequest& a, DSMRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSMRequest* New() const final {
    return CreateMaybeMessage<DSMRequest>(nullptr);
  }

  DSMRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSMRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSMRequest& from);
  void MergeFrom(const DSMRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSMRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nodeid = 3;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 3;
  const ::std::string& nodeid() const;
  void set_nodeid(const ::std::string& value);
  #if LANG_CXX11
  void set_nodeid(::std::string&& value);
  #endif
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  ::std::string* mutable_nodeid();
  ::std::string* release_nodeid();
  void set_allocated_nodeid(::std::string* nodeid);

  // int64 address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::google::protobuf::int64 address() const;
  void set_address(::google::protobuf::int64 value);

  // int32 reqType = 1;
  void clear_reqtype();
  static const int kReqTypeFieldNumber = 1;
  ::google::protobuf::int32 reqtype() const;
  void set_reqtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataproto.DSMRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nodeid_;
  ::google::protobuf::int64 address_;
  ::google::protobuf::int32 reqtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// -------------------------------------------------------------------

class DSMReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.DSMReply) */ {
 public:
  DSMReply();
  virtual ~DSMReply();

  DSMReply(const DSMReply& from);

  inline DSMReply& operator=(const DSMReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSMReply(DSMReply&& from) noexcept
    : DSMReply() {
    *this = ::std::move(from);
  }

  inline DSMReply& operator=(DSMReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DSMReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSMReply* internal_default_instance() {
    return reinterpret_cast<const DSMReply*>(
               &_DSMReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DSMReply* other);
  friend void swap(DSMReply& a, DSMReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSMReply* New() const final {
    return CreateMaybeMessage<DSMReply>(nullptr);
  }

  DSMReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSMReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSMReply& from);
  void MergeFrom(const DSMReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSMReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data(int index, ::std::string&& value);
  #endif
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  #if LANG_CXX11
  void add_data(::std::string&& value);
  #endif
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:dataproto.DSMReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// -------------------------------------------------------------------

class DTRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.DTRequest) */ {
 public:
  DTRequest();
  virtual ~DTRequest();

  DTRequest(const DTRequest& from);

  inline DTRequest& operator=(const DTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DTRequest(DTRequest&& from) noexcept
    : DTRequest() {
    *this = ::std::move(from);
  }

  inline DTRequest& operator=(DTRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DTRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DTRequest* internal_default_instance() {
    return reinterpret_cast<const DTRequest*>(
               &_DTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DTRequest* other);
  friend void swap(DTRequest& a, DTRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DTRequest* New() const final {
    return CreateMaybeMessage<DTRequest>(nullptr);
  }

  DTRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DTRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DTRequest& from);
  void MergeFrom(const DTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DTRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nodeid = 3;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 3;
  const ::std::string& nodeid() const;
  void set_nodeid(const ::std::string& value);
  #if LANG_CXX11
  void set_nodeid(::std::string&& value);
  #endif
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  ::std::string* mutable_nodeid();
  ::std::string* release_nodeid();
  void set_allocated_nodeid(::std::string* nodeid);

  // int64 address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::google::protobuf::int64 address() const;
  void set_address(::google::protobuf::int64 value);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataproto.DTRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nodeid_;
  ::google::protobuf::int64 address_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// -------------------------------------------------------------------

class DTReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataproto.DTReply) */ {
 public:
  DTReply();
  virtual ~DTReply();

  DTReply(const DTReply& from);

  inline DTReply& operator=(const DTReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DTReply(DTReply&& from) noexcept
    : DTReply() {
    *this = ::std::move(from);
  }

  inline DTReply& operator=(DTReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DTReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DTReply* internal_default_instance() {
    return reinterpret_cast<const DTReply*>(
               &_DTReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DTReply* other);
  friend void swap(DTReply& a, DTReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DTReply* New() const final {
    return CreateMaybeMessage<DTReply>(nullptr);
  }

  DTReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DTReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DTReply& from);
  void MergeFrom(const DTReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DTReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataproto.DTReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageRequest

// int32 seqId = 1;
inline void MessageRequest::clear_seqid() {
  seqid_ = 0;
}
inline ::google::protobuf::int32 MessageRequest::seqid() const {
  // @@protoc_insertion_point(field_get:dataproto.MessageRequest.seqId)
  return seqid_;
}
inline void MessageRequest::set_seqid(::google::protobuf::int32 value) {
  
  seqid_ = value;
  // @@protoc_insertion_point(field_set:dataproto.MessageRequest.seqId)
}

// int32 msgType = 2;
inline void MessageRequest::clear_msgtype() {
  msgtype_ = 0;
}
inline ::google::protobuf::int32 MessageRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:dataproto.MessageRequest.msgType)
  return msgtype_;
}
inline void MessageRequest::set_msgtype(::google::protobuf::int32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:dataproto.MessageRequest.msgType)
}

// string nodeId = 3;
inline void MessageRequest::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:dataproto.MessageRequest.nodeId)
  return nodeid_.GetNoArena();
}
inline void MessageRequest::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataproto.MessageRequest.nodeId)
}
#if LANG_CXX11
inline void MessageRequest::set_nodeid(::std::string&& value) {
  
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataproto.MessageRequest.nodeId)
}
#endif
inline void MessageRequest::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataproto.MessageRequest.nodeId)
}
inline void MessageRequest::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataproto.MessageRequest.nodeId)
}
inline ::std::string* MessageRequest::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:dataproto.MessageRequest.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageRequest::release_nodeid() {
  // @@protoc_insertion_point(field_release:dataproto.MessageRequest.nodeId)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRequest::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:dataproto.MessageRequest.nodeId)
}

// int32 lockNo = 4;
inline void MessageRequest::clear_lockno() {
  lockno_ = 0;
}
inline ::google::protobuf::int32 MessageRequest::lockno() const {
  // @@protoc_insertion_point(field_get:dataproto.MessageRequest.lockNo)
  return lockno_;
}
inline void MessageRequest::set_lockno(::google::protobuf::int32 value) {
  
  lockno_ = value;
  // @@protoc_insertion_point(field_set:dataproto.MessageRequest.lockNo)
}

// -------------------------------------------------------------------

// MessageReply

// int32 result = 1;
inline void MessageReply::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 MessageReply::result() const {
  // @@protoc_insertion_point(field_get:dataproto.MessageReply.result)
  return result_;
}
inline void MessageReply::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:dataproto.MessageReply.result)
}

// -------------------------------------------------------------------

// DSMRequest

// int32 reqType = 1;
inline void DSMRequest::clear_reqtype() {
  reqtype_ = 0;
}
inline ::google::protobuf::int32 DSMRequest::reqtype() const {
  // @@protoc_insertion_point(field_get:dataproto.DSMRequest.reqType)
  return reqtype_;
}
inline void DSMRequest::set_reqtype(::google::protobuf::int32 value) {
  
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:dataproto.DSMRequest.reqType)
}

// int64 address = 2;
inline void DSMRequest::clear_address() {
  address_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 DSMRequest::address() const {
  // @@protoc_insertion_point(field_get:dataproto.DSMRequest.address)
  return address_;
}
inline void DSMRequest::set_address(::google::protobuf::int64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:dataproto.DSMRequest.address)
}

// string nodeid = 3;
inline void DSMRequest::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DSMRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:dataproto.DSMRequest.nodeid)
  return nodeid_.GetNoArena();
}
inline void DSMRequest::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataproto.DSMRequest.nodeid)
}
#if LANG_CXX11
inline void DSMRequest::set_nodeid(::std::string&& value) {
  
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataproto.DSMRequest.nodeid)
}
#endif
inline void DSMRequest::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataproto.DSMRequest.nodeid)
}
inline void DSMRequest::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataproto.DSMRequest.nodeid)
}
inline ::std::string* DSMRequest::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:dataproto.DSMRequest.nodeid)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DSMRequest::release_nodeid() {
  // @@protoc_insertion_point(field_release:dataproto.DSMRequest.nodeid)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DSMRequest::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:dataproto.DSMRequest.nodeid)
}

// -------------------------------------------------------------------

// DSMReply

// repeated bytes data = 1;
inline int DSMReply::data_size() const {
  return data_.size();
}
inline void DSMReply::clear_data() {
  data_.Clear();
}
inline const ::std::string& DSMReply::data(int index) const {
  // @@protoc_insertion_point(field_get:dataproto.DSMReply.data)
  return data_.Get(index);
}
inline ::std::string* DSMReply::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dataproto.DSMReply.data)
  return data_.Mutable(index);
}
inline void DSMReply::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dataproto.DSMReply.data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DSMReply::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dataproto.DSMReply.data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DSMReply::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dataproto.DSMReply.data)
}
inline void DSMReply::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dataproto.DSMReply.data)
}
inline ::std::string* DSMReply::add_data() {
  // @@protoc_insertion_point(field_add_mutable:dataproto.DSMReply.data)
  return data_.Add();
}
inline void DSMReply::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dataproto.DSMReply.data)
}
#if LANG_CXX11
inline void DSMReply::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dataproto.DSMReply.data)
}
#endif
inline void DSMReply::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dataproto.DSMReply.data)
}
inline void DSMReply::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dataproto.DSMReply.data)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DSMReply::data() const {
  // @@protoc_insertion_point(field_list:dataproto.DSMReply.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DSMReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dataproto.DSMReply.data)
  return &data_;
}

// -------------------------------------------------------------------

// DTRequest

// int64 address = 1;
inline void DTRequest::clear_address() {
  address_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 DTRequest::address() const {
  // @@protoc_insertion_point(field_get:dataproto.DTRequest.address)
  return address_;
}
inline void DTRequest::set_address(::google::protobuf::int64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:dataproto.DTRequest.address)
}

// int32 size = 2;
inline void DTRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 DTRequest::size() const {
  // @@protoc_insertion_point(field_get:dataproto.DTRequest.size)
  return size_;
}
inline void DTRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dataproto.DTRequest.size)
}

// string nodeid = 3;
inline void DTRequest::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DTRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:dataproto.DTRequest.nodeid)
  return nodeid_.GetNoArena();
}
inline void DTRequest::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataproto.DTRequest.nodeid)
}
#if LANG_CXX11
inline void DTRequest::set_nodeid(::std::string&& value) {
  
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataproto.DTRequest.nodeid)
}
#endif
inline void DTRequest::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataproto.DTRequest.nodeid)
}
inline void DTRequest::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataproto.DTRequest.nodeid)
}
inline ::std::string* DTRequest::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:dataproto.DTRequest.nodeid)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DTRequest::release_nodeid() {
  // @@protoc_insertion_point(field_release:dataproto.DTRequest.nodeid)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DTRequest::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:dataproto.DTRequest.nodeid)
}

// -------------------------------------------------------------------

// DTReply

// int32 state = 1;
inline void DTReply::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 DTReply::state() const {
  // @@protoc_insertion_point(field_get:dataproto.DTReply.state)
  return state_;
}
inline void DTReply::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:dataproto.DTReply.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dataproto_2eproto
